5.
import numpy as np 
w1 = 0.4 
w2 = -0.3 
w3 = 0.1 
w4 = -0.2 

b1 = 0.1 
b2 = 0.2 
b3 = -0.1 
# Define the input and target output 
x = np.array([1 ])
y_true = np.array([1]
) 
# Set the tolerance 
tolerance = 0.01 
# Loop until the predicted output is within the tolerance 
while True: 
    # Forward propagation 
    h1 = x * w1 + b1 
    h2 = x * w2 + b2 
    y_pred = h1 * w3 + h2 * w4 + b3 
    # Calculate the error 
    error = y_true - y_pred 
    if abs(error) < tolerance: 
        break 
    # Backpropagation 
    d_y_pred = -2 * error 
    d_w3 = h1 * d_y_pred 
    d_h1 = w3 * d_y_pred 
    d_w4 = h2 * d_y_pred 
    d_h2 = w4 * d_y_pred 
    d_h1[h1 <= 0] = 0 
    d_h2[h2 <= 0] = 0 
    d_w1 = x * d_h1 
    d_b1 = d_h1 
    d_w2 = x * d_h2 
    d_b2 = d_h2 
    # Update the weights and biases 
    learning_rate = 0.1 
    w1 -= learning_rate * d_w1 
    w2 -= learning_rate * d_w2 
    w3 -= learning_rate * d_w3 
    w4 -= learning_rate * d_w4 
    b1 -= learning_rate * d_b1 
    b2 -= learning_rate * d_b2 
    b3 -= learning_rate * d_y_pred 
    # Print the predicted output and all intermediate values on the same line 
print(f"Predicted output: {y_pred[0]:.2f}, w1: {w1[0]:.2f}, w2: {w2[0]:.2f}, w3: {w3[0]:.2f}, w4: {w4[0]:.2f}, b1: {b1[0]:.2f}, b2: {b2[0]:.2f}, b3: {b3[0]:.2f}, h1: {h1[0]:.2f}, h2: {h2[0]:.2f}, error: {error[0]:.2f}") 
print("Target output reached!")     
print("Input: \n" + str(x))
print("Actual Output: \n" + str(y_true))
print("Predicted Output: \n" ,y_pred)

6.
import numpy as np
class RBFNetwork:
    def __init__(self, num_centers, sigma):
        self.num_centers = num_centers
        self.sigma = sigma
        self.centers = None
        self.weights = None

    def _calculate_activations(self, X):
        num_samples = X.shape[0]
        num_features = X.shape[1]
        activations = np.zeros((num_samples, self.num_centers))
        for i in range(num_samples):
            for j in range(self.num_centers):
                distance = np.linalg.norm(X[i] - self.centers[j])
                activations[i][j] = np.exp(-distance**2 / (2 * self.sigma**2))
        return activations

    def fit(self, X, y):
        self.centers = X[np.random.choice(X.shape[0], self.num_centers, replace=False)]
        activations = self._calculate_activations(X)

        self.weights = np.linalg.pinv(activations.T @ activations) @ activations.T @ y

    def predict(self, X):
        activations = self._calculate_activations(X)
        return activations @ self.weights
X_train = np.array([[0], [1], [2], [3], [4], [5]])
y_train = np.array([0, 1, 0, 1, 0, 1])
X_test = np.array([[1.5], [3.5]])
num_centers = 2
sigma = 1.0
rbf_net = RBFNetwork(num_centers, sigma)
rbf_net.fit(X_train, y_train)
predictions = rbf_net.predict(X_test)
print(predictions)

7.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
from sklearn.decomposition import PCA
from sklearn.neighbors import LocalOutlierFactor
from sklearn.ensemble import IsolationForest

import warnings
warnings.filterwarnings("ignore")

df = pd.read_csv("creditcard.csv")
df.head()

sns.countplot(df.Class)
plt.show()
print(df.Class.value_counts())

timedelta = pd.to_timedelta(df['Time'], unit='s')
df['Time_hour'] = (timedelta.dt.components.hours).astype(int)

plt.figure(figsize=(12,5))
sns.distplot(df[df['Class'] == 0]["Time_hour"], color='g')
sns.distplot(df[df['Class'] == 1]["Time_hour"], color='r')
plt.title('Fraud and Normal Transactions by Hours', fontsize=17)
plt.xlim([-1,25])
plt.show()

